Package Features:
    - Constrain correleation coefficients between +/- 1
    - Implement RK4 prediction step
    - Implement prediction IMU flag
    - Implement flag for calibration settling
    - Implement flag for calibration shifting
    - GPS update and notion of global frame
    - Interpolation between stochastic clones
    - Feature comparisons between cameras
    - Option to pre-fuse IMU measurements
    - LOST initialization: https://gtsam.org/2023/02/04/lost-triangulation.html
    - First estimate jacobians
    - Zero-Velocity Update / Stationary Filter
    - Option for complementary IMU filter
    - Option for fixed IMU offsets - high certainty constraint update
    - IMU Time Update Equations
    - RTS-Smoothing: https://math.stackexchange.com/questions/1811214/time-complexity-of-kalman-filter-and-rts-smoother
    - Intrinsic calibration filtering
    - Condition and distance thresholds
    - Check covariance matrix condition

    GPS Updater:
        - LLA to NED calibration
        2 Stage Update - 
        1.) Refine LLA to NED World to Local Conversion
        2.) Once settled, switch to using GPS to update state

Software Work:
    - Define types/transforms to force different coordinate frames
    - Define types/transforms to force different time values
    - Auto-generate rviz configuration from yaml
    - Compile separate libraries without dependencies
    - CI/CD for unit tests
    - Set of single metrics for performance evaluation/testing
    - Integration tests
    - Remove Singleton Instance of EKF for simultaneous filter testing
    - Move feature detection out of tracker callback
    - Option to de-register sensor
    - Add performance logging level / tracing: https://perf.wiki.kernel.org/index.php/Tutorial
    - Log to file like tee
    - Pick style and make it consistent
    - Add binaries to Github release
    - RQT Dashboard
    - Code Maintainability Score https://codeclimate.com
    - OpenSSF Best Practices https://bestpractices.coreinfrastructure.org
    - Parameter for max frame length
    - Include What You Use
    - Eigen aliasing and eval
    - Test build on different ROS docker versions
    - Add mutex to EKF class and have mutex locked by updaters
    - Input file generator
    - Add number of runs in input
    - Output true feature locations to data logger
    - Switch to reentrant callback group
    - Show track images from simulation
    - Plot body error against truth if available
    Simple Simulation:
        - Add parameter for feature point uncertainty

    Additional Trackers:
        - FiducialTracker
            - ArucoBoardTracker
            - CharucoBoardTracker
            - ChessBoardTracker
            - CharucoDiamondTracker

Documentation:
    - Create Cake Diagram for EKF_CAL architecture
    - Paper in JOSS: Journal of Open Source Software
    - Deploy Github page for generated doxygen
    - Plant UML Functional Flow Diagrams
    - Simulation diagram
    - Citation File: https://citation-file-format.github.io//

Experimentation:
    - Test monte carlo simulation and plotting
