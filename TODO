Simple Simulation Work:
    - Tracker model
    - Simulated fiducial detector / Board detector with and without uncertainty
    - Determine if point is in FOV
    - Generate random points on walls
    - Add eval scripts ekfEval.py and simEval.py

Package Features:
    - Add detector for Aruco
    - Add detector for Charuco
    - Add detector for Aprilgrid
    - Constrain correleation coefficients between +/- 1
    - Implement RK4 prediction step
    - Implement flag for calibration settling
    - Implement flag for calibration shifting
    - GPS update and notion of global frame
    - Interpolation between stochastic clones
    - Feature comparisons between cameras
    - Option to pre-fuse IMU measurements
    - LOST initialization: https://gtsam.org/2023/02/04/lost-triangulation.html
    - First estimate jacobians
    - Zero-Velocity Update
    - Option for complementary IMU filter
    - Option for fixed IMU offsets - high certainty constraint update
    - IMU Time Update Equations
    - RTS-Smoothing: https://math.stackexchange.com/questions/1811214/time-complexity-of-kalman-filter-and-rts-smoother

Software Work:
    - Define types/transforms to force different coordinate frames
    - Define types/transforms to force different time values
    - Auto-generate rviz configuration from yaml
    - Compile separate libraries without dependencies
    - Timing analysis / logging output
    - Separate logging tiles / tee
    - CI/CD for unit tests
    - Set of single metrics for performance evaluation/testing
    - Integration tests
    - Remove Singleton Instance of EKF for simultaneous testing
    - Move feature detection out of tracker callback
    - Create Dockerfile for package
    - Option to de-register sensor
    - Add performance logging level / tracing: https://perf.wiki.kernel.org/index.php/Tutorial
    - Log to file
    - Add "detectors" configuration for aruco: Map of arcuo starting ID to global pose
    - Have EKF instance own updaters
        - EKF::RegisterSensor() returns pointer to updater
        - Sensor calls updater callback which calls sort/pop
        - Add sort/pop for incoming messages into EKF 
            - EKF::AddMessageToBuffer()
            - EKF::ProcessNextMessage()
    - Add binaries to Github release
    - RQT Dashboard


Documentation:
    - Create Cake Diagram for EKF-CAL architecture
    - Paper in JOSS: Journal of Open Source Software
    - Deploy Github page for generated doxygen
    - Plant UML Functional Flow Diagrams
    - Simulation diagram
    - Citation File: https://citation-file-format.github.io//

Experimentation:
    - Add profiling
    - Submit ROS bag dataset to IEEE Dataport or add as release package